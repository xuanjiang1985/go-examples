// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shot.proto

/*
Package shot is a generated protocol buffer package.

It is generated from these files:
	shot.proto

It has these top-level messages:
	TakeRequest
	TakeReply
*/
package shot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type TakeRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age  uint32 `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

func (m *TakeRequest) Reset()                    { *m = TakeRequest{} }
func (m *TakeRequest) String() string            { return proto.CompactTextString(m) }
func (*TakeRequest) ProtoMessage()               {}
func (*TakeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TakeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TakeRequest) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

// The response message containing the greetings
type TakeReply struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age  uint32 `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

func (m *TakeReply) Reset()                    { *m = TakeReply{} }
func (m *TakeReply) String() string            { return proto.CompactTextString(m) }
func (*TakeReply) ProtoMessage()               {}
func (*TakeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TakeReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TakeReply) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func init() {
	proto.RegisterType((*TakeRequest)(nil), "shot.TakeRequest")
	proto.RegisterType((*TakeReply)(nil), "shot.TakeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tank service

type TankClient interface {
	// Sends a greeting
	ShotOut(ctx context.Context, in *TakeRequest, opts ...grpc.CallOption) (*TakeReply, error)
}

type tankClient struct {
	cc *grpc.ClientConn
}

func NewTankClient(cc *grpc.ClientConn) TankClient {
	return &tankClient{cc}
}

func (c *tankClient) ShotOut(ctx context.Context, in *TakeRequest, opts ...grpc.CallOption) (*TakeReply, error) {
	out := new(TakeReply)
	err := grpc.Invoke(ctx, "/shot.Tank/ShotOut", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tank service

type TankServer interface {
	// Sends a greeting
	ShotOut(context.Context, *TakeRequest) (*TakeReply, error)
}

func RegisterTankServer(s *grpc.Server, srv TankServer) {
	s.RegisterService(&_Tank_serviceDesc, srv)
}

func _Tank_ShotOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TankServer).ShotOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shot.Tank/ShotOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TankServer).ShotOut(ctx, req.(*TakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tank_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shot.Tank",
	HandlerType: (*TankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShotOut",
			Handler:    _Tank_ShotOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shot.proto",
}

func init() { proto.RegisterFile("shot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xce, 0xc8, 0x2f,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x8c, 0xb9, 0xb8, 0x43, 0x12,
	0xb3, 0x53, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73,
	0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x01, 0x2e, 0xe6, 0xc4, 0xf4,
	0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xde, 0x20, 0x10, 0x53, 0xc9, 0x90, 0x8b, 0x13, 0xa2, 0xa9,
	0x20, 0xa7, 0x92, 0x38, 0x2d, 0x46, 0xe6, 0x5c, 0x2c, 0x21, 0x89, 0x79, 0xd9, 0x42, 0xfa, 0x5c,
	0xec, 0xc1, 0x19, 0xf9, 0x25, 0xfe, 0xa5, 0x25, 0x42, 0x82, 0x7a, 0x60, 0xd7, 0x20, 0x59, 0x2f,
	0xc5, 0x8f, 0x2c, 0x54, 0x90, 0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0xad, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0xac, 0x8b, 0x75, 0x42, 0xbb, 0x00, 0x00, 0x00,
}
